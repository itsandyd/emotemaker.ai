"use client"

import { Header } from "@/components/Header";
import { Avatar, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { type NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useState } from "react";


const colors = [
  "blue",
  "red",
  "pink",
  "green",
  "orange",
  "yellow",
  "white",
  "black",
];

const shapes = ["square", "circle", "rounded"];

const styles = [
  "claymorphic",
  "3d rendered",
  "pixelated",
  "illustrated with color pencil",
];

const GeneratePage: NextPage = () => {
  const [form, setForm] = useState({
    prompt: "",
    // color: "",
    // shape: "",
    // style: "",
    // numberOfIcons: "1",
  });
  const [error, setError] = useState("");
  const [imagesUrl, setImagesUrl] = useState<{ imageUrl: string }[]>([]);

  

//   const generateIcon = api.generate.generateIcon.useMutation({
//     onSuccess(data) {
//       setImagesUrl(data);
//     },
//     onError(error) {
//       setError(error.message);
//     },
//   });

//   function handleFormSubmit(e: React.FormEvent) {
//     e.preventDefault();
//     setError("");
//     generateIcon.mutate({
//       ...form,
//       numberOfIcons: parseInt(form.numberOfIcons),
//     });
//   }

//   function updateForm(key: string) {
//     return function (e: React.ChangeEvent<HTMLInputElement>) {
//       setForm((prev) => ({
//         ...prev,
//         [key]: e.target.value,
//       }));
//     };
//   }

  return (
    <>
      <Head>
        <title>Generate Twitch Emotes</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <main className="container mx-auto mt-24 flex min-h-screen flex-col gap-4 px-8">
        <Card>
          <CardHeader>
            <CardTitle>Generate your Twitch emotes</CardTitle>
          </CardHeader>
          <CardContent>
          <Form {...form}>
          {/* <form className="space-y-8"> */}
            <FormField
            //   control={form.control}
              name="prompt"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Prompt</FormLabel>
                  <FormControl>
                    <Input placeholder="Describe your icon" {...field} />
                  </FormControl>
                  <FormDescription>
                    Describe what you want your icon to look like.
                  </FormDescription>
                  <FormMessage />
                </FormItem>
              )}
              />
            <Button type="submit">Submit</Button>
          {/* </form> */}
          </Form>
            {imagesUrl.length > 0 && (
              <>
                <h2 className="text-xl">Your Icons</h2>
                <section className="mb-12 grid grid-cols-4 gap-4">
                  {imagesUrl.map(({ imageUrl }) => (
                    <Avatar key={imageUrl}>
                      <AvatarImage src={imageUrl} />
                    </Avatar>
                  ))}
                </section>
              </>
            )}
          </CardContent>
        </Card>
      </main>
    </>
  );
};

export default GeneratePage;
