// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

// // Necessary for Next auth
// model Account {
//   id                String  @id @default(cuid())
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String? @db.Text
//   access_token      String? @db.Text
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String? @db.Text
//   session_state     String?
//   user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

model Profile {
  id        String  @id @default(uuid())
  userId    String  @unique
  name      String?
  imageUrl  String? @db.Text
  email     String? @db.Text
  bio       String? @db.Text
  twitch    String? @db.Text
  youtube   String? @db.Text
  instagram String? @db.Text
  twitter   String? @db.Text
  status    String? @default("active") // e.g., active, suspended, inactive
  isPublic  Boolean @default(false) // New field to control profile visibility

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id])
}

enum SubscriptionType {
  FREE
  BASIC
  STANDARD
  PREMIUM
  LEGACY // Represents users who subscribed under the old unlimited plan
}

model User {
  id                 String            @id @default(cuid())
  name               String?
  email              String?           @unique
  emailVerified      DateTime?
  image              String?
  credits            Int               @default(5)
  subscritpion       UserSubscription? @relation
  userSubscriptionId String?
  profile            Profile?
  emote              Emote[]
  isActiveSubscriber Boolean           @default(false) // New field to indicate active subscription status
  subscriptionType   SubscriptionType? // New field for subscription type
  EmoteForSale       EmoteForSale[]
  boards             Board[] // New relation field for boards

  @@index([userSubscriptionId])
}

model Emote {
  id           String        @id @default(cuid())
  prompt       String?
  style        String? // This will store the emote type
  model        String? // This will store the selected model
  imageUrl     String?       @db.Text
  user         User?         @relation(fields: [userId], references: [id])
  userId       String?
  createdAt    DateTime?     @default(now())
  emoteForSale EmoteForSale?

  @@index([userId])
}

enum EmoteStatus {
  DRAFT
  PUBLISHED
}

enum EmoteType {
  FREE
  PREMIUM
}

model EmoteForSale {
  id             String      @id @default(cuid())
  emoteId        String      @unique
  imageUrl       String      @db.Text
  watermarkedUrl String?     @db.Text
  prompt         String
  price          Float?
  style          String?
  model          String? // Add this line
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  status         EmoteStatus @default(DRAFT)
  type           EmoteType   @default(FREE)
  user           User?       @relation(fields: [userId], references: [id])
  userId         String?

  emote    Emote      @relation(fields: [emoteId], references: [id])
  purchase Purchase[]

  @@index([userId])
}

// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
// }

model UserApiLimit {
  id        String   @id @default(cuid())
  userId    String   @unique
  count     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserSubscription {
  id                     String    @id @default(cuid())
  userId                 String    @unique
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
  createdAt              DateTime  @default(now())
  updatedAt              DateTime? @updatedAt
  name                   String?
  email                  String?
  credits                Int       @default(0) // New credits field
  user                   User?     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Purchase {
  id              String   @id @default(cuid())
  userId          String
  emoteForSaleId  String
  paymentIntentId String
  createdAt       DateTime @default(now())

  emoteForSale EmoteForSale @relation(fields: [emoteForSaleId], references: [id])

  @@index([emoteForSaleId])
}

// Existing datasource and generator configurations remain unchanged

// Add the following models based on the Convex schema

model Board {
  id         String   @id @default(cuid())
  title      String
  orgId      String?
  authorId   String?
  authorName String?
  imageUrl   String?
  createdAt  DateTime @default(now())
  userId     String // Ensure this field is not nullable
  user       User     @relation(fields: [userId], references: [id]) // Ensure this relation is not nullable

  favorites UserFavorite[]

  @@index([orgId])
  @@index([userId])
}

model UserFavorite {
  id      String @id @default(cuid())
  userId  String
  boardId String
  orgId   String

  board Board @relation(fields: [boardId], references: [id])

  @@unique([userId, boardId])
  @@index([userId, orgId])
  @@index([boardId])
}

model OrgSubscription {
  id                     String   @id @default(cuid())
  orgId                  String   @unique
  stripeCustomerId       String
  stripeSubscriptionId   String   @unique
  stripePriceId          String
  stripeCurrentPeriodEnd DateTime

  @@index([orgId])
}

// Existing models (User, Profile, Emote, etc.) remain unchanged
